#ifndef __VIRTUAL_MCU_UART_H__
#define __VIRTUAL_MCU_UART_H__

/*---------------------------------------------------------------------------------------------------*/
/*                                      UART配置                                                   	 */
/*---------------------------------------------------------------------------------------------------*/

/* 支持的UART输出端口索引号 */
///外设暂时支持UART1,UART2 , UART0用于底层打印，UART1，UART2 支持下面几组接口，可根据需求设置对应接口
///UART1       GROUP1      632N_UART1_GROUP_TXPB04_RXPB05
///UART1       GROUP2      632N_UART1_GROUP_TXPB00_RXPB01
///UART1       GROUP3      632N_UART1_GROUP_TXPA07_RXPA08
///UART1       GROUP4      632N_UART1_GROUP_USB_TXDP_RXDM

///UART2       GROUP1      632N_UART2_GROUP_TXPA03_RXPA04
///UART2       GROUP3      632N_UART2_GROUP_TXPB06_RXPB07
///UART2       GROUP4      632N_UART2_GROUP_TXPDP1_RXPDM1
enum
{
    UART0 = 0,
    UART1,
    UART2,
};
/* 支持的UART端口对应引脚索引号 */
enum
{
    GROUP1 = 0,
    GROUP2 ,
    GROUP3 ,
    GROUP4 ,
};

/* 支持的波特率索引号 */
enum{
	BAUD_2400 = 0,
	BAUD_4800,
	BAUD_9600,
	BAUD_19200,
	BAUD_38400,
	BAUD_57600,
	BAUD_115200,
	BAUD_230400,
	BAUD_460800,
	BAUD_MAX,
};
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart端口打开
   @param    uart_index 		UART输出端口索引号
   @param    used_uart_group 	UART端口对应引脚索引号
   @param    baud_index 		波特率索引号
   @return
   @note
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_set_BT_System_uart_open(u8 uart_index, u8 used_uart_group, u8 baud_index);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart端口关闭
   @param    uart_index 		UART输出端口索引号
   @return
   @note
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_set_BT_System_uart_colse(u8 uart_index);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart发送数据
   @param    uart_index 		UART输出端口索引号
   @param    *buff 				UART发送的数据指针
   @param	 buff_len			UART发送的数据长度
   @param    block_enable		UART发送阻塞使能,
   								取值为0，发送完成需要用户查询；
   								取值为1，发送完成再退出函数；
   @return   返回值表示已经发送的数据字节长度
   @note     波特率使用2400bps,硬件传输1个字节大概需要4ms;
   			 波特率使用9600bps,硬件传输1个字节大概需要1ms;
   			 波特率使用115200bps,硬件传输1个字节大概需要1/12ms;

   			 综合上述，根据用户使用UART波特率,计算发送一帧数据需要的时间，
   			 决定是否使用发送阻塞;
   			 当一帧数据发送耗时较长，需使用非阻塞方式发送
*/
/*---------------------------------------------------------------------------------------------------*/
u16 polyc_uart_send_data(u8 uart_index, u8 *buff, u16 buff_len, u8 block_enable);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    获取uart发送状态
   @param    uart_index 		UART输出端口索引号
   @return   返回值 1			UART发送数据在忙
   			 返回值 0			UART发送数据完成
   @note
*/
/*---------------------------------------------------------------------------------------------------*/
u8 polyc_uart_get_send_busy(u8 uart_index);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart0发送中断函数回调函数
   @param
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart0_send_finish_func_callback(void);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart0接收中断函数回调函数
   @param    *buff 		        UART接收的数据指针
   @param	 buff_size			UART接收的数据长度
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart0_recieved_data_func_callback(u8 *buff,u16 buff_size);

/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart1发送中断函数回调函数
   @param
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart1_send_finish_func_callback(void);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart1接收中断函数回调函数
   @param    *buff 		        UART接收的数据指针
   @param	 buff_size			UART接收的数据长度
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart1_recieved_data_func_callback(u8 *buff,u16 buff_size);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart2发送中断函数回调函数
   @param
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart2_send_finish_func_callback(void);
/*---------------------------------------------------------------------------------------------------*/
/*
   @brief    uart2接收中断函数回调函数
   @param    *buff 		        UART接收的数据指针
   @param	 buff_size			UART接收的数据长度
   @return
   @note     中断服务回调函数,需快进快出，耗时处理不要在这里实现
*/
/*---------------------------------------------------------------------------------------------------*/
void polyc_uart2_recieved_data_func_callback(u8 *buff,u16 buff_size);




#endif
